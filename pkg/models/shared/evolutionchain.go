// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EvolutionChainChainEvolutionDetailsTimeOfDay - The required time of day. Day or night.
type EvolutionChainChainEvolutionDetailsTimeOfDay string

const (
	EvolutionChainChainEvolutionDetailsTimeOfDayDay   EvolutionChainChainEvolutionDetailsTimeOfDay = "day"
	EvolutionChainChainEvolutionDetailsTimeOfDayNight EvolutionChainChainEvolutionDetailsTimeOfDay = "night"
)

func (e EvolutionChainChainEvolutionDetailsTimeOfDay) ToPointer() *EvolutionChainChainEvolutionDetailsTimeOfDay {
	return &e
}

func (e *EvolutionChainChainEvolutionDetailsTimeOfDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "night":
		*e = EvolutionChainChainEvolutionDetailsTimeOfDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EvolutionChainChainEvolutionDetailsTimeOfDay: %v", v)
	}
}

type EvolutionChainChainEvolutionDetails struct {
	// The required female gender of the evolving Pokémon species. Must be either 1 or 2, or null if the Pokémon species has no gender or the gender is fixed.
	Gender        *int64    `json:"gender,omitempty"`
	HeldItem      *Item     `json:"held_item,omitempty"`
	Item          *Item     `json:"item,omitempty"`
	KnownMove     *Move     `json:"known_move,omitempty"`
	KnownMoveType *Type     `json:"known_move_type,omitempty"`
	Location      *Location `json:"location,omitempty"`
	// The minimum required affection of the evolving Pokémon species
	MinAffection *int64 `json:"min_affection,omitempty"`
	// The minimum required beauty of the evolving Pokémon species
	MinBeauty *int64 `json:"min_beauty,omitempty"`
	// The minimum required happiness of the evolving Pokémon species
	MinHappiness *int64 `json:"min_happiness,omitempty"`
	// The minimum required level of the evolving Pokémon species
	MinLevel *int64 `json:"min_level,omitempty"`
	// Whether or not it must be raining in the overworld to evolve into this Pokémon species
	NeedsOverworldRain *bool           `json:"needs_overworld_rain,omitempty"`
	PartySpecies       *PokemonSpecies `json:"party_species,omitempty"`
	PartyType          *Type           `json:"party_type,omitempty"`
	// The required relation between the Pokémon's Attack and Defense stats. 1 means Attack > Defense, 0 means Attack = Defense, and -1 means Attack < Defense.
	RelativePhysicalStats *int64 `json:"relative_physical_stats,omitempty"`
	// The required time of day. Day or night.
	TimeOfDay    *EvolutionChainChainEvolutionDetailsTimeOfDay `json:"time_of_day,omitempty"`
	TradeSpecies *PokemonSpecies                               `json:"trade_species,omitempty"`
	Trigger      *EvolutionTrigger                             `json:"trigger,omitempty"`
	// Whether or not the 3DS needs to be turned upside-down as this Pokémon levels up.
	TurnUpsideDown *bool `json:"turn_upside_down,omitempty"`
}

func (o *EvolutionChainChainEvolutionDetails) GetGender() *int64 {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *EvolutionChainChainEvolutionDetails) GetHeldItem() *Item {
	if o == nil {
		return nil
	}
	return o.HeldItem
}

func (o *EvolutionChainChainEvolutionDetails) GetItem() *Item {
	if o == nil {
		return nil
	}
	return o.Item
}

func (o *EvolutionChainChainEvolutionDetails) GetKnownMove() *Move {
	if o == nil {
		return nil
	}
	return o.KnownMove
}

func (o *EvolutionChainChainEvolutionDetails) GetKnownMoveType() *Type {
	if o == nil {
		return nil
	}
	return o.KnownMoveType
}

func (o *EvolutionChainChainEvolutionDetails) GetLocation() *Location {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *EvolutionChainChainEvolutionDetails) GetMinAffection() *int64 {
	if o == nil {
		return nil
	}
	return o.MinAffection
}

func (o *EvolutionChainChainEvolutionDetails) GetMinBeauty() *int64 {
	if o == nil {
		return nil
	}
	return o.MinBeauty
}

func (o *EvolutionChainChainEvolutionDetails) GetMinHappiness() *int64 {
	if o == nil {
		return nil
	}
	return o.MinHappiness
}

func (o *EvolutionChainChainEvolutionDetails) GetMinLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.MinLevel
}

func (o *EvolutionChainChainEvolutionDetails) GetNeedsOverworldRain() *bool {
	if o == nil {
		return nil
	}
	return o.NeedsOverworldRain
}

func (o *EvolutionChainChainEvolutionDetails) GetPartySpecies() *PokemonSpecies {
	if o == nil {
		return nil
	}
	return o.PartySpecies
}

func (o *EvolutionChainChainEvolutionDetails) GetPartyType() *Type {
	if o == nil {
		return nil
	}
	return o.PartyType
}

func (o *EvolutionChainChainEvolutionDetails) GetRelativePhysicalStats() *int64 {
	if o == nil {
		return nil
	}
	return o.RelativePhysicalStats
}

func (o *EvolutionChainChainEvolutionDetails) GetTimeOfDay() *EvolutionChainChainEvolutionDetailsTimeOfDay {
	if o == nil {
		return nil
	}
	return o.TimeOfDay
}

func (o *EvolutionChainChainEvolutionDetails) GetTradeSpecies() *PokemonSpecies {
	if o == nil {
		return nil
	}
	return o.TradeSpecies
}

func (o *EvolutionChainChainEvolutionDetails) GetTrigger() *EvolutionTrigger {
	if o == nil {
		return nil
	}
	return o.Trigger
}

func (o *EvolutionChainChainEvolutionDetails) GetTurnUpsideDown() *bool {
	if o == nil {
		return nil
	}
	return o.TurnUpsideDown
}

type EvolutionChainChain struct {
	// The chain of Pokémon species that forms part of this evolution chain
	EvolutionDetails []EvolutionChainChainEvolutionDetails `json:"evolution_details,omitempty"`
	// Whether or not this is a baby Pokémon
	IsBaby  *bool           `json:"is_baby,omitempty"`
	Species *PokemonSpecies `json:"species,omitempty"`
}

func (o *EvolutionChainChain) GetEvolutionDetails() []EvolutionChainChainEvolutionDetails {
	if o == nil {
		return nil
	}
	return o.EvolutionDetails
}

func (o *EvolutionChainChain) GetIsBaby() *bool {
	if o == nil {
		return nil
	}
	return o.IsBaby
}

func (o *EvolutionChainChain) GetSpecies() *PokemonSpecies {
	if o == nil {
		return nil
	}
	return o.Species
}

type EvolutionChain struct {
	// The item that a baby Pokémon would be holding when born during a forced evolution
	BabyTriggerItem *Item               `json:"baby_trigger_item,omitempty"`
	Chain           EvolutionChainChain `json:"chain"`
	// The identifier for this evolution chain resource
	ID int64 `json:"id"`
}

func (o *EvolutionChain) GetBabyTriggerItem() *Item {
	if o == nil {
		return nil
	}
	return o.BabyTriggerItem
}

func (o *EvolutionChain) GetChain() EvolutionChainChain {
	if o == nil {
		return EvolutionChainChain{}
	}
	return o.Chain
}

func (o *EvolutionChain) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}
